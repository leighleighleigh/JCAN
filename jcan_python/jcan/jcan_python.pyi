# EXAMPLE OF PEP484 stub-type definition.
# class Car:
#     """
#     A class representing a car.

#     :param body_type: the name of body type, e.g. hatchback, sedan
#     :param horsepower: power of the engine in horsepower
#     """
#     def __init__(self, body_type: str, horsepower: int) -> None: ...

#     @classmethod
#     def from_unique_name(cls, name: str) -> 'Car':
#         """
#         Creates a Car based on unique name

#         :param name: model name of a car to be created
#         :return: a Car instance with default data
#         """

#     def best_color(self) -> str:
#         """
#         Gets the best color for the car.

#         :return: the name of the color our great algorithm thinks is the best for this car
#         """

# Below are some hand-crafted stub-types for the JCAN python package.
# This means you get nice auto-completion and type-analysis, even though it's a static library.
# This file is based off the contents of ./jcan_python/src/lib.rs
from typing import List, Optional, Self, Callable

class Frame:
    def __init__(self, id: int, data: List[int]) -> None: ...
    def __str__(self) -> str: ...
    def id(self) -> int: ...
    def data(self) -> List[int]: ...

class Bus:
    def open(self, interface: str, tx_queue_len: int = 2, rx_queue_len: int = 256) -> None: ...
    def close(self) -> None: ...
    def is_open(self) -> bool: ...
    def callbacks_enabled(self) -> bool: ...
    def set_callbacks_enabled(self, mode: bool) -> None: ...
    def receive(self) -> Optional[Frame]: ...
    def receive_with_timeout(self, timeout_ms: int) -> Optional[Frame]: ...
    def send(self, frame: Frame) -> None: ...
    def drop_buffered_frames(self) -> None: ...
    def set_id_filter(self, allowed_ids: List[int]) -> None: ...
    def set_id_filter_mask(self, allowed: int, allowed_mask: int) -> None: ...
    def receive_from_thread_buffer(self) -> Optional[List[Frame]]: ...
    def add_callback(self, frame_id: int, callback: Callable[[Frame], None]) -> None: ...
    def spin(self) -> None: ...

